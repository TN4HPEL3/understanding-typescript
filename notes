The key differences is: JavaScript uses "dynamic types" (resolved at runtime), TypeScript uses "static types" (set during development)

Type Casing:

- In TypeScript, you work with types like string or number all the times.
- Important: It is string and number (etc.), NOT String, Number etc.
- The core primitive types in TypeScript are all lowercase.

1. Why are "Types" usefull and offer an advantage compare to vanilla JavaScript?

- Types allow you to detect errors early and avoid runtimes errors.

2. Assigning a boolean to a variable which was assigned a "string" types is not allowed and will yield a compilation error.

3. What's the difference between JavaScript types and TypeScript types?

- TS are checked during compilation, JS types during runtime.

<!--  -->

Nested Objects & Types

Object types can also be created for nested objects.
const product = {
id: 'abc1',
price: 12.99,
tags: ['great-offer', 'hot-and-new'],
details: {
title: 'Red Carpet',
description: 'A great carpet - almost brand-new!'
}
}

This would be type of such an object:
{
id: string,
price: number;
tags: string[];
details: {
title: string;
description: string;
}
}

Tuples are special arrays where you declare how many elements it should have and types of this elements.

Enum :Automatically enumerated global constant identifiers.

CORE TYPES :

1. number 1, 5.3, -10 (All numbers, no differentiation between integers or floast)
2. string 'Hi', "Hi", `Hi` (All text values)
3. boolean true, false (Just these two, no "truthy" or "falsy" values)
4. object {age: 30} (Any JavaScript object, more specific types (type of object) are possible)
5. Array [1, 2, 3] (Any JavaScript array, type can be flexible or strict (regarding the element types))
6. Tuple [1, 2] (Added by TypeScript: Fixed-length array)
7. Enum enum {NEW, OLD} (Added by TypeScript: Automatically enumerated global constant identifiers)
8. Any \* (Any kind of value, no specific type assignment)
